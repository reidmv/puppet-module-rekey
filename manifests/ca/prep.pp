# Private class
class rekey::ca::prep {
  if $caller_module_name != $module_name {
    fail("Use of private class ${name} by ${caller_module_name}")
  }

  $ssldir       = $rekey::ca::ssldir
  $rekey_module = get_module_path('rekey')
  $date = generate('/bin/date')

  file { $ssldir:
    ensure => directory,
    owner  => $::id,
    mode   => '0700',
  }

  file { "${settings::confdir}/ssl_backups":
    ensure => directory,
    owner  => $::id,
    mode   => '0700',
  }

  exec { 'rekey_preserve_installed_ssldir':
    command => "tar -czf ${backup_file} ${settings::ssldir}",
    creates => $backup_file,
    path    => $::path,
    require => File["${settings::confdir}/ssl_backups"],
  }

  # TODO: analyze for a better way of generating a unique ca_name.
  exec { 'rekey_create_ca':
    command => "puppet cert list --all --ssldir ${ssldir} --ca_name 'Puppet CA generated by ${clientcert} ${date}'",
    path    => "/opt/puppet/bin:${::path}",
    creates => "${ssldir}/ca",
    require => File[$ssldir],
  }

  file { "${rekey_module}/files/var/ca.pem":
    ensure  => file,
    owner   => $::id,
    mode    => '0644',
    source  => "${ssldir}/ca/ca_crt.pem",
    require => Exec['rekey_create_ca'],
  }

  file { 'rekey_moduledir_signed_copy':
    path    => "${rekey_module}/files/var/signed",
    ensure  => directory,
    source  => "${ssldir}/ca/signed",
    recurse => true,
    purge   => true,
    force   => true,
    require => Exec['rekey_create_ca'],
  }

  # Collect and sign all exported certificate requests
  Rekey::Ca::Certificate <<| |>>

  if $rekey::ca::install {
    include stdlib::stages
    class { 'rekey::ca::install':
      stage => 'deploy',
    }
  }

}
